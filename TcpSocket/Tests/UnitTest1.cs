namespace Tests
{
    public class UnitTest1
    {
        [Theory]
        [InlineData(@"0123", @"0123")]
        [InlineData(@"abcxyz", @"abcxyz")]
        [InlineData(@"@!#$%^()[]", @"@!#$%^()[]")]
        [InlineData(@"가나다뀕팛", @"가나다뀕팛")]
        [InlineData(@"😂🤣⛴🛬🎁", @"😂🤣⛴🛬🎁")]
        [InlineData
        [InlineData
        public async Task LocalServerTest(string input, string expected)
        {
            string address = "127.0.0.1";
            int port = 12345;

            KpServer server = new KpServer(port);
            server.Start();

            var msg = new Message(input);

            int count = 20;
            List<KpSocket> sockets = new List<KpSocket>();

            for (int i = 0; i < count; i++)
            {
                KpSocket socket = new KpSocket(address, port);
                socket.Id = i;
                _ = socket.StartAsync();
                sockets.Add(socket);
            }

            while (server.ClientCount < count)
            {
                await Task.Delay(1);
            }

            for (int i = 0; i < count; i++)
            {
                _ = sockets[i].SendAsync(msg);
            }

            int passedCount = 0;
            int totalReceivedMsgLength = 0;
            for (int i = 0; i < count; i++)
            {
                for (int j = 0; j < count; j++)
                {
                    var actual = await sockets[j].ReceiveAsync();
                    if (expected != actual.Msg)
                        Assert.True(false, $"i={i}, j={j}, expected={expected}, actual={actual.Msg}, passedCount={passedCount}, totalReceivedMsgLength={totalReceivedMsgLength}");
                    passedCount++;
                    totalReceivedMsgLength += actual.Msg.Length;
                }
            }

            for (int i = 0; i < count; i++)
            {
                sockets[i].Stop();
            }

            while (server.ClientCount > 0)
                await Task.Delay(1);

            server.Stop();
        }


        [Theory]
        [InlineData(@"0123", @"0123")]
        [InlineData(@"abcxyz", @"abcxyz")]
        [InlineData(@"@!#$%^()[]", @"@!#$%^()[]")]
        [InlineData(@"가나다뀕팛", @"가나다뀕팛")]
        [InlineData(@"😂🤣⛴🛬🎁", @"😂🤣⛴🛬🎁")]
        [InlineData
        [InlineData
        public async Task LocalReliableServerTest(string input, string expected)
        {
            string address = "127.0.0.1";
            int port = 12345;

            ReliableKpServer server = new ReliableKpServer(port);
            server.Start();

            var msg = new Message(input);

            int count = 20;
            List<ReliableKpSocket> sockets = new List<ReliableKpSocket>();

            for (int i = 0; i < count; i++)
            {
                ReliableKpSocket socket = new ReliableKpSocket(address, port);
                socket.Id = i;
                _ = socket.StartAsync();
                sockets.Add(socket);
            }

            while (server.ClientCount < count)
            {
                await Task.Delay(1);
            }

            for (int i = 0; i < count; i++)
            {
                _ = sockets[i].SendAsync(msg);
            }

            int passedCount = 0;
            int totalReceivedMsgLength = 0;
            for (int i = 0; i < count; i++)
            {
                for (int j = 0; j < count; j++)
                {
                    ReliableMessage actual = (ReliableMessage)await sockets[j].ReceiveAsync();
                    if (expected != actual.Content)
                        Assert.True(false, $"i={i}, j={j}, expected={expected}, actual={actual.Content}, passedCount={passedCount}, totalReceivedMsgLength={totalReceivedMsgLength}");
                    passedCount++;
                    totalReceivedMsgLength += actual.Content.Length;
                }
            }

            for (int i = 0; i < count; i++)
            {
                sockets[i].Stop();
            }

            while (server.ClientCount > 0)
                await Task.Delay(1);

            server.Stop();
        }
    }
}