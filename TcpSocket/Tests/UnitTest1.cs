namespace Tests
{
    public class UnitTest1
    {
        [Theory]
        [InlineData(@"0123", @"0123")]
        [InlineData(@"abcxyz", @"abcxyz")]
        [InlineData(@"@!#$%^()[]", @"@!#$%^()[]")]
        [InlineData(@"가나다뀕팛", @"가나다뀕팛")]
        [InlineData(@"😂🤣⛴🛬🎁", @"😂🤣⛴🛬🎁")]
        [InlineData
        [InlineData

        public async Task LocalServerTest(string input, string expected)
        {
            string address = "127.0.0.1";
            int port = 12345;

            KpServer ks = new KpServer(port);
            ks.Start();

            var msg = new Message(input);

            int count = 200;
            List<KpClient> clients = new List<KpClient>();

            for (int i = 0; i < count; i++)
            {
                KpClient kc = new KpClient(address, port);
                kc.Cid = i;
                _ = kc.StartAsync();
                clients.Add(kc);
            }

            while (ks.ClientCount < count)
                await Task.Delay(1);
            

            for (int i = 0; i < count; i++)
            {
                _ = clients[i].SendAsync(msg);
            }

            //int passedCount = 0;
            //int totalReceivedMsgLength = 0;
            List<Message>[] messages = new List<Message>[count];
            for (int i = 0; i < count; i++)
                messages[i] = new List<Message>();

            List<Task> tasks = new List<Task>();
            for (int i = 0; i < count; i++)
            {
                int cid = i;
                Task t = Task.Run(async () =>
                {
                    for (int _ = 0; _ < count; _++)
                    {
                        var actual = await clients[cid].ReceiveAsync();
                        messages[cid].Add(actual);
                    }
                });
                tasks.Add(t);
            }

            await Task.WhenAll(tasks);

            for (int i = 0; i < count; i++)
            {
                foreach (Message actual in messages[i])
                {
                    if (expected != actual.Msg)
                        Assert.True(false, $"i={i}, expected={expected}, actual={actual.Msg}");
                }
                clients[i].Stop();
            }

            while (ks.ClientCount > 0)
                await Task.Delay(1);

            ks.Stop();
        }
    }
}